

#include <18F4550.H> // Selecciona el Microcontrolador
#fuses xt,nowdt,noprotect,put
#use delay(clock= 4Mhz)
#include "Mi_LCD.c"
#include <Mi_Teclado.c>
#use fast_io(b)
#use fast_io(d)
#use fast_io(c)
#byte PORTB = 0xF81
#byte PORTC = 0xF82
#byte PORTD = 0xF83
#byte PORTE = 0xF84
#define  Useg Buffer[7]
#define  Dseg Buffer[6]
#define  Umin Buffer[4]
#define  Dmin Buffer[3]
#define  Uhora Buffer[1]
#define  Dhora Buffer[0]

// Variables Globales

int8 Buffer[8] = {50, 51, 58, 53, 57, 58, 53, 54};
int8 LaTecla; 
int8 Y,X;

#int_TIMER0
void Timer0_int()
{  set_timer0(49910);
   Useg++;
   if (Useg < 58)
      goto  sale;
   Useg = 48;
   Dseg++;
   if (Dseg < 54)
      goto  sale;
   Dseg = 48;
   Umin++;
   if (Umin < 58)
      goto  sale;
   Umin = 48;
   Dmin++;
   if (Dmin < 54)
      goto  sale;
   Dmin = 48;
   Uhora++;
      if (Uhora < 51)
      goto  sale;
       if (Uhora < 58)
      goto  sale;
     Dhora++;
     Uhora = 48;
   
   
   
   sale:lcd_gotoxy(2,2);
   printf(lcd_putc,"%s",Buffer);
   output_toggle(PIN_C0);
}

//**************************************************************************

void MoverBuffer()
{  Buffer[0] = Buffer[1];
   delay_ms(50);
   Buffer[1] = Buffer[3];
    delay_ms(50);
   Buffer[3] = Buffer[4];
    delay_ms(50);
   Buffer[4] = Buffer[6];
    delay_ms(50);
   Buffer[6] = Buffer[7];
    delay_ms(50);
   Buffer[7] = LaTecla;
   Buffer[8] = 0x00;
   lcd_gotoxy(2,2);
   printf(lcd_putc,"%s",Buffer);
}


//*****************************************************************************
 void restriccion()  //Restriccion de 23 a 00
 {
  
  if((Buffer[0] == 50 ) && (Buffer[1] == 51) &&  (Buffer[3] == 53) && (Buffer[4] == 57) && (Buffer[6] == 53) && (Buffer[7] == 57))
              {  Buffer[7] = 48;
                 Buffer[6] = 48;
                 Buffer[4] = 48;
                 Buffer[3] = 48;
                 Buffer[1] = 48;
                 Buffer[0] = 48;
             
            
                        }   
              
              
 }
//*****************************************************************************

 void restriccion2()  
 {
  
  if((Buffer[0] >= 51 )  ||  (Buffer[3] >= 54)  || (Buffer[6] >= 54))
              {  Buffer[7] = 48;
                 Buffer[6] = 48;
                 Buffer[4] = 48;
                 Buffer[3] = 48;
                 Buffer[1] = 48;
                 Buffer[0] = 48;
             bit_clear(LaTecla,7);
            
                        }   
              
              
 }
//*****************************************************************************
void AjusteHora(void)
{  int8 i;
   for (i=48;i<=55;i++)
      {  if ((i == 50) || (i == 53))
            {  i++;            
            }
         Buffer[i] = 57;
         delay_ms(100);
          output_high(PIN_C0);
      }
}

//*****************************************************************************

 void borrar()  //Detiene por break y pone en 0 los buffers
 {
  
    
  Buffer[7] = 48;
  Buffer[6] = 48;
  Buffer[4] = 48;
  Buffer[3] = 48;
  Buffer[1] = 48;
  Buffer[0] = 48;            
    
 }
 
 //***************************************************************************
 


void MoverBuffer2()
{  Buffer[55] = Buffer[54];
   delay_ms(5);
   Buffer[54] = Buffer[52];
   delay_ms(5);
   Buffer[52] = Buffer[51];
   delay_ms(5);
   Buffer[51] = Buffer[49];
   delay_ms(5);
   Buffer[49] = Buffer[48];
   delay_ms(5);
   output_toggle(Buffer[48]=48);
   Buffer[48] = LaTecla;
}


//*****************************************************************************

void main()
{  set_tris_b(0xF0);
   set_tris_d(0x00);
   set_tris_c(0x00);
   setup_timer_0(RTCC_DIV_16 | RTCC_INTERNAL);
   set_timer0(49910);
   enable_interrupts(INT_TIMER0);
   enable_interrupts(GLOBAL);
   output_c(0xff);
   lcd_init();
   lcd_putc("Hora:");

   while(1)
      {  LaTecla = kbd_getc();
         delay_ms(50);
         if (LaTecla != 0)
         
     
            
               switch(LaTecla)
               {  case 65: 
                           break;
            
                  case 66: restriccion2();
                           setup_timer_0(RTCC_DIV_16 | RTCC_INTERNAL | RTCC_OFF);
                          
                  
                           break;
               
                  case 67: 
                           setup_timer_0(RTCC_DIV_16 | RTCC_INTERNAL); //Sigue contando
                           
                           break;
               
                  case 68: 
                           setup_timer_0(RTCC_DIV_16 | RTCC_INTERNAL | RTCC_OFF); //Ajustar la hora
                           output_high(PIN_C1);  
                        
                           borrar();
                           
                           
                           break;
               
                  case 69: setup_timer_0(RTCC_DIV_16 | RTCC_INTERNAL);
                           output_low(PIN_C1);
                           
                           
                           
                           
                           break;
               
                  case 70: break;
               
                  default: MoverBuffer();
                           break;
               }
               
               restriccion();
                  restriccion2();
 
               
               
               
                
               
               
      }
}





